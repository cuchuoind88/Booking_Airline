// <auto-generated />
using System;
using Booking_Airline.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking_Airline.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddionalFoodServiceFlightDetail", b =>
                {
                    b.Property<Guid>("AddionalFoodServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("flightDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddionalFoodServicesId", "flightDetailsId");

                    b.HasIndex("flightDetailsId");

                    b.ToTable("AddionalFoodServiceFlightDetail");
                });

            modelBuilder.Entity("AddionalFoodServiceReservation", b =>
                {
                    b.Property<Guid>("AddionalFoodServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("reservationDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddionalFoodServicesId", "reservationDetailsId");

                    b.HasIndex("reservationDetailsId");

                    b.ToTable("AddionalFoodServiceReservation");
                });

            modelBuilder.Entity("Booking_Airline.Models.AddionalFoodService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FoodPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("AddionalFoodService");
                });

            modelBuilder.Entity("Booking_Airline.Models.AdditionalSeatService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("seatLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("seatPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("seatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalSeatService");
                });

            modelBuilder.Entity("Booking_Airline.Models.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AirportCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Booking_Airline.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("contryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Booking_Airline.Models.FlightDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AirlineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DestinationAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilghtName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SourceAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("SourceAirportId");

                    b.ToTable("FlightDetails");
                });

            modelBuilder.Entity("Booking_Airline.Models.FoodForFlight", b =>
                {
                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FlightId", "FoodId");

                    b.HasIndex("FlightDetailId");

                    b.HasIndex("FoodServiceId");

                    b.ToTable("FoodForFlight");
                });

            modelBuilder.Entity("Booking_Airline.Models.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Booking_Airline.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReservationIDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReservationIDId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Booking_Airline.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Booking_Airline.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfReservation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("PassengerIDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RervationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeatDetailsIDId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PassengerIDId");

                    b.HasIndex("SeatDetailsIDId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Booking_Airline.Models.ReservationMapAddionalFoodService", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalFoodServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfMeals")
                        .HasColumnType("int");

                    b.HasKey("ReservationId", "AdditionalFoodServiceId");

                    b.HasIndex("AdditionalFoodServiceId");

                    b.ToTable("ReservationMapAddionalFoodService");
                });

            modelBuilder.Entity("Booking_Airline.Models.RoleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Booking_Airline.Models.SeatDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<Guid>("SeatAdditionalServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeatCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("FlightId");

                    b.HasIndex("SeatAdditionalServiceId");

                    b.ToTable("SeatDetails");
                });

            modelBuilder.Entity("Booking_Airline.Models.ServiceForClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServcieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceForClasses");
                });

            modelBuilder.Entity("Booking_Airline.Models.TicketPrice", b =>
                {
                    b.Property<Guid>("TicketPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TicketPriceId");

                    b.HasIndex("ClassID");

                    b.HasIndex("FlightId");

                    b.ToTable("TicketPrice");
                });

            modelBuilder.Entity("Booking_Airline.Models.TokenRemainLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TokenRemainLogins");
                });

            modelBuilder.Entity("Booking_Airline.Models.TravelClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TravelClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TravelClasses");
                });

            modelBuilder.Entity("Booking_Airline.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleModelUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleModelUser");
                });

            modelBuilder.Entity("ServiceForClassTravelClass", b =>
                {
                    b.Property<Guid>("ServiceForClassesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TravelClassesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceForClassesId", "TravelClassesId");

                    b.HasIndex("TravelClassesId");

                    b.ToTable("ServiceForClassTravelClass");
                });

            modelBuilder.Entity("AddionalFoodServiceFlightDetail", b =>
                {
                    b.HasOne("Booking_Airline.Models.AddionalFoodService", null)
                        .WithMany()
                        .HasForeignKey("AddionalFoodServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.FlightDetail", null)
                        .WithMany()
                        .HasForeignKey("flightDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddionalFoodServiceReservation", b =>
                {
                    b.HasOne("Booking_Airline.Models.AddionalFoodService", null)
                        .WithMany()
                        .HasForeignKey("AddionalFoodServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("reservationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Airline.Models.Airport", b =>
                {
                    b.HasOne("Booking_Airline.Models.Country", "Country")
                        .WithMany("Airports")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Booking_Airline.Models.FlightDetail", b =>
                {
                    b.HasOne("Booking_Airline.Models.Airport", "DestinationAirport")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.Airport", "SourceAirPort")
                        .WithMany("Flights")
                        .HasForeignKey("SourceAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationAirport");

                    b.Navigation("SourceAirPort");
                });

            modelBuilder.Entity("Booking_Airline.Models.FoodForFlight", b =>
                {
                    b.HasOne("Booking_Airline.Models.FlightDetail", "FlightDetail")
                        .WithMany()
                        .HasForeignKey("FlightDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.AddionalFoodService", "FoodService")
                        .WithMany()
                        .HasForeignKey("FoodServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightDetail");

                    b.Navigation("FoodService");
                });

            modelBuilder.Entity("Booking_Airline.Models.Payment", b =>
                {
                    b.HasOne("Booking_Airline.Models.Reservation", "ReservationID")
                        .WithMany()
                        .HasForeignKey("ReservationIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservationID");
                });

            modelBuilder.Entity("Booking_Airline.Models.RefreshToken", b =>
                {
                    b.HasOne("Booking_Airline.Models.User", "User")
                        .WithMany("refreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booking_Airline.Models.Reservation", b =>
                {
                    b.HasOne("Booking_Airline.Models.Passenger", "PassengerID")
                        .WithMany()
                        .HasForeignKey("PassengerIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.SeatDetails", "SeatDetailsID")
                        .WithMany()
                        .HasForeignKey("SeatDetailsIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassengerID");

                    b.Navigation("SeatDetailsID");
                });

            modelBuilder.Entity("Booking_Airline.Models.ReservationMapAddionalFoodService", b =>
                {
                    b.HasOne("Booking_Airline.Models.AddionalFoodService", "AdditionalFoodService")
                        .WithMany()
                        .HasForeignKey("AdditionalFoodServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalFoodService");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Booking_Airline.Models.SeatDetails", b =>
                {
                    b.HasOne("Booking_Airline.Models.TravelClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.FlightDetail", "Flight")
                        .WithMany("SeatDetails")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.AdditionalSeatService", "SeatAdditionalService")
                        .WithMany("SeatDetails")
                        .HasForeignKey("SeatAdditionalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Flight");

                    b.Navigation("SeatAdditionalService");
                });

            modelBuilder.Entity("Booking_Airline.Models.TicketPrice", b =>
                {
                    b.HasOne("Booking_Airline.Models.TravelClass", "TravelClass")
                        .WithMany("TicketPrices")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.FlightDetail", "FlightDetail")
                        .WithMany("TicketPrices")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightDetail");

                    b.Navigation("TravelClass");
                });

            modelBuilder.Entity("Booking_Airline.Models.TokenRemainLogin", b =>
                {
                    b.HasOne("Booking_Airline.Models.User", "User")
                        .WithMany("tokenRemainLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleModelUser", b =>
                {
                    b.HasOne("Booking_Airline.Models.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceForClassTravelClass", b =>
                {
                    b.HasOne("Booking_Airline.Models.ServiceForClass", null)
                        .WithMany()
                        .HasForeignKey("ServiceForClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Airline.Models.TravelClass", null)
                        .WithMany()
                        .HasForeignKey("TravelClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Airline.Models.AdditionalSeatService", b =>
                {
                    b.Navigation("SeatDetails");
                });

            modelBuilder.Entity("Booking_Airline.Models.Airport", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Booking_Airline.Models.Country", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("Booking_Airline.Models.FlightDetail", b =>
                {
                    b.Navigation("SeatDetails");

                    b.Navigation("TicketPrices");
                });

            modelBuilder.Entity("Booking_Airline.Models.TravelClass", b =>
                {
                    b.Navigation("TicketPrices");
                });

            modelBuilder.Entity("Booking_Airline.Models.User", b =>
                {
                    b.Navigation("refreshTokens");

                    b.Navigation("tokenRemainLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
